"""create tables

Revision ID: 3ccd72ee027d
Revises: 
Create Date: 2025-03-21 20:29:09.546760

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.sql import func


# revision identifiers, used by Alembic.
revision: str = '3ccd72ee027d'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('hashed_password', sa.String(), nullable=False),
    sa.Column('registered_at', sa.TIMESTAMP(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_id'), 'user', ['id'], unique=False)
    op.create_table('linkdata',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('original_url', sa.String(), nullable=True),
    sa.Column('short_code', sa.String(), nullable=True),
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('expires_at', sa.DateTime(), nullable=False),
    sa.Column('usage_count', sa.Integer(), nullable=False),
    sa.Column('last_used_at', sa.DateTime(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    # Create the PostgreSQL function for generating unique short codes
    op.execute("""
        CREATE OR REPLACE FUNCTION public.generate_unique_short_code(
            length integer DEFAULT 6)
            RETURNS text
            LANGUAGE 'plpgsql'
            COST 100
            VOLATILE PARALLEL UNSAFE
        AS $BODY$
        DECLARE
            characters TEXT := 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
            generated_code TEXT;
        BEGIN
            LOOP
                generated_code := '';
                FOR i IN 1..length LOOP
                    generated_code := generated_code || substr(characters, ceil(random() * length(characters))::integer, 1);
                END LOOP;
        
                -- Проверяем, существует ли уже такой short_code в таблице linkdata
                PERFORM 1 FROM linkdata WHERE linkdata.short_code = generated_code;
                IF NOT FOUND THEN
                    RETURN generated_code;
                END IF;
            END LOOP;
        END;
        $BODY$;
        
        ALTER FUNCTION public.generate_unique_short_code(integer)
            OWNER TO postgres;
    """)


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('linkdata')
    op.drop_index(op.f('ix_user_id'), table_name='user')
    op.drop_table('user')
    # ### end Alembic commands ###
    # Drop the PostgreSQL function during downgrade
    op.execute("DROP FUNCTION IF EXISTS generate_unique_short_code(INT);")